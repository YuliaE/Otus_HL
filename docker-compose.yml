volumes:
    pgdata:
    rabbitmq1_data:
    rabbitmq2_data:
    rabbitmq3_data:

services:
  backend:
    container_name: backend
    environment:
      DB_HOST: "pg"
      DB_PORT: 5432
      DB_USER: "user"
      DB_PASSWORD: "user"
      DB_NAME: "otus_db"
      # REDIS_HOST: "redis:6379"
      # REDIS_PASSWORD : "user"
      # REDIS_USER : "user"
      # #REDIS_PORT: 6379
      # REDIS_DB: 0
      REDIS_STR: "redis://user:user@redis:6379/0"
      AMQP_SERVER_URL: "amqp://rmuser:rmpassword@haproxy:5672/"
    build:
      context: backend
    depends_on: 
      - rabbitmq1 
    ports:
      - 3000:3000
    volumes:
      - .:/usr/src/app
    command: go run ./main.go -b 0.0.0.0
    networks:
      - otus_net
  rabbitmq1:
    image: rabbitmq:3.13.7-management
    hostname: rabbitmq1
    restart: always
    environment:
      - RABBITMQ_DEFAULT_USER=rmuser
      - RABBITMQ_DEFAULT_PASS=rmpassword
      - RABBITMQ_DEFAULT_VHOST=/
    volumes:
      - ./clusterrabbitmq/cluster-entrypoint.sh:/usr/local/bin/cluster-entrypoint.sh # Инициализация
      - rabbitmq1_data:/var/lib/rabbitmq/mnesia
    entrypoint: /usr/local/bin/cluster-entrypoint.sh
    networks:
      - otus_net

  rabbitmq2:
    image: rabbitmq:3.13.7-management
    hostname: rabbitmq2
    depends_on:
     - rabbitmq1
    restart: always
    environment:
     - JOIN_CLUSTER_HOST=rabbitmq1
    volumes:
      - ./clusterrabbitmq/cluster-entrypoint.sh:/usr/local/bin/cluster-entrypoint.sh # Инициализация
      - rabbitmq2_data:/var/lib/rabbitmq/mnesia
    entrypoint: /usr/local/bin/cluster-entrypoint.sh
    networks:
      - otus_net

  rabbitmq3:
    image: rabbitmq:3.13.7-management
    hostname: rabbitmq3
    depends_on:
     - rabbitmq1
    restart: always
    environment:
     - JOIN_CLUSTER_HOST=rabbitmq1
    volumes:
      - ./clusterrabbitmq/cluster-entrypoint.sh:/usr/local/bin/cluster-entrypoint.sh # Инициализация
      - rabbitmq3_data:/var/lib/rabbitmq/mnesia
    entrypoint: /usr/local/bin/cluster-entrypoint.sh
    networks:
      - otus_net

  haproxy:
    container_name: haproxy
    image: haproxy:3.0
    volumes:
      - ./haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg
    depends_on:
      - rabbitmq1
      - rabbitmq2
      - rabbitmq3
    ports:
      - 15672:15672
      - 5672:5672
    networks:
      - otus_net

  pg:
    container_name: pg
    image: postgres:17
    environment:
      POSTGRES_DB: "otus_db"
      POSTGRES_USER: "user"
      POSTGRES_PASSWORD: "user"
    mem_limit: 512m
    ports:
      - 5432:5432
    restart: always
    volumes:
      - ./Postgres:/docker-entrypoint-initdb.d # Инициализация таблиц
      - pgdata:/var/lib/postgresql/data # Папка, где postgres будет хранить данные
      - ./volumes/Database/backups:/backups # Папка для бекапов
    networks:
      - otus_net

  redis:
    image: redis:8.0-M03
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
     # - /path/to/local/dаta:/root/redis
      - ./lua/redis.conf:/usr/local/etc/redis/redis.conf
    environment:
   #   - REDIS_PASSWORD=user
   #   - REDIS_USER=user
      - REDIS_PORT=6379
      - REDIS_DATABASES=0
    networks:
      - otus_net

  load_csv:   
    build: ./LoadCSV   
    depends_on: 
      - pg
    networks:
      - otus_net

  proxy:
    image: nginx
    volumes:
      - type: bind
        source: ./proxy/nginx.conf
        target: /etc/nginx/conf.d/default.conf
        read_only: true
    ports:
      - 8080:80
    depends_on: 
      - backend
    networks:
      - otus_net

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pg-ad
    environment: 
      PGADMIN_DEFAULT_EMAIL: "user@domain.com"
      PGADMIN_DEFAULT_PASSWORD: "1234"
    ports: 
      - "8888:80"
    networks:
      - otus_net 

networks:
  otus_net:
    driver: bridge
